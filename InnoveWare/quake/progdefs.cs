using System;
using System.Collections.Generic;
using Helper;

namespace quake
{
    using System.Runtime.CompilerServices;

    public partial class prog
    {
        /* file generated by qcc, do not modify */

        public class globalvars_t
        {
        	public int[]	pad = new int[28]; // 0
            public int	    self; // 28
	        public int	    other;
            public int      world; // 30
            public double   time;
            public double   frametime;
            public double   force_retouch;
            public int      mapname;
            public double   deathmatch; // 35
            public double   coop;
            public double   teamplay;
            public double   serverflags;
            public double   total_secrets;
            public double   total_monsters; // 40
            public double   found_secrets;
            public double   killed_monsters;
            public double   parm1;
            public double   parm2;
            public double   parm3; // 45
            public double   parm4;
            public double   parm5;
            public double   parm6;
            public double   parm7;
            public double   parm8; // 50
            public double   parm9;
            public double   parm10;
            public double   parm11;
            public double   parm12;
            public double   parm13; // 55
            public double   parm14;
            public double   parm15;
            public double   parm16;
            public double[] v_forward = new double[3]; // 59
            public double[] v_up = new double[3]; // 62
            public double[] v_right = new double[3]; // 65
            public double   trace_allsolid; // 68
            public double   trace_startsolid;
            public double   trace_fraction; // 70
            public double[] trace_endpos = new double[3]; // 71
            public double[] trace_plane_normal = new double[3]; // 74
            public double   trace_plane_dist; // 77
            public int      trace_ent;
            public double   trace_inopen;
            public double   trace_inwater; // 80
            public int      msg_entity;
            public int      main;
            public int      StartFrame;
            public int      PlayerPreThink;
            public int      PlayerPostThink; // 85
            public int      ClientKill;
            public int      ClientConnect;
            public int      PutClientInServer;
            public int      ClientDisconnect;
            public int      SetNewParms; // 90
            public int      SetChangeParms;

            public static implicit operator globalvars_t(helper.ByteBuffer buf)
            {
                int ofs = buf.ofs;
                int kk;
                globalvars_t globalvars = new globalvars_t();
                for (kk = 0; kk < 28; kk++)
                {
                    globalvars.pad[kk] = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                }
                globalvars.self = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.other = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.world = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.time = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.frametime = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.force_retouch = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.mapname = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.deathmatch = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.coop = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.teamplay = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.serverflags = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.total_secrets = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.total_monsters = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.found_secrets = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.killed_monsters = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm1 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm2 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm3 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm4 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm5 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm6 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm7 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm8 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm9 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm10 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm11 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm12 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm13 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm14 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm15 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.parm16 = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                for (kk = 0; kk < 3; kk++)
                {
                    globalvars.v_forward[kk] = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                }
                for (kk = 0; kk < 3; kk++)
                {
                    globalvars.v_up[kk] = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                }
                for (kk = 0; kk < 3; kk++)
                {
                    globalvars.v_right[kk] = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                }
                globalvars.trace_allsolid = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.trace_startsolid = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.trace_fraction = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                for (kk = 0; kk < 3; kk++)
                {
                    globalvars.trace_endpos[kk] = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                }
                for (kk = 0; kk < 3; kk++)
                {
                    globalvars.trace_plane_normal[kk] = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                }
                globalvars.trace_plane_dist = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.trace_ent = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.trace_inopen = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.trace_inwater = BitConverter.ToSingle(buf.buffer, ofs); ofs += sizeof(float);
                globalvars.msg_entity = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.main = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.StartFrame = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.PlayerPreThink = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.PlayerPostThink = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.ClientKill = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.ClientConnect = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.PutClientInServer = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.ClientDisconnect = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.SetNewParms = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                globalvars.SetChangeParms = BitConverter.ToInt32(buf.buffer, ofs); ofs += sizeof(int);
                return globalvars;
            }

        };
        public const int sizeof_globalvars_t = 368;

        
        public class entvars_t
        {
	        [Reflectable] 
            public double   modelindex; // 0

            [Reflectable]
            public double[] absmin = new double[3]; // 1
            [Reflectable]
            public double[] absmax = new double[3]; // 4
            [Reflectable]
            public double ltime; // 7
            [Reflectable]
            public double movetype;
            [Reflectable]
            public double solid;
            [Reflectable]
            public double[] origin = new double[3]; // 10
            [Reflectable]
            public double[] oldorigin = new double[3]; // 13
            [Reflectable]
            public double[] velocity = new double[3]; // 16
            [Reflectable]
            public double[] angles = new double[3]; // 19
            [Reflectable]
            public double[] avelocity = new double[3]; // 22
            [Reflectable]
            public double[] punchangle = new double[3]; // 25
            [Reflectable]
            public int classname; // 28
            [Reflectable]
            public int model;
            [Reflectable]
            public double frame; // 30
            [Reflectable]
            public double skin;
            [Reflectable]
            public double effects;
            [Reflectable]
            public double[] mins = new double[3]; // 33
            [Reflectable]
            public double[] maxs = new double[3]; // 36
            [Reflectable]
            public double[] size = new double[3]; // 39
            [Reflectable]
            public int touch; // 42
            [Reflectable]
            public int use;
            [Reflectable]
            public int think;
            [Reflectable]
            public int blocked; // 45
            [Reflectable]
            public double nextthink;
            [Reflectable]
            public int groundentity;
            [Reflectable]
            public double health;
            [Reflectable]
            public double frags;
            [Reflectable]
            public double weapon; // 50
            [Reflectable]
            public int weaponmodel;
            [Reflectable]
            public double weaponframe;
            [Reflectable]
            public double currentammo;
            [Reflectable]
            public double ammo_shells;
            [Reflectable]
            public double ammo_nails; // 55
            [Reflectable]
            public double ammo_rockets;
            [Reflectable]
            public double ammo_cells;
            [Reflectable]
            public double items;
            [Reflectable]
            public double takedamage;
            [Reflectable]
            public int chain; // 60
            [Reflectable]
            public double deadflag;
            [Reflectable]
            public double[] view_ofs = new double[3]; // 62
            [Reflectable]
            public double button0; // 65
            [Reflectable]
            public double button1;
            [Reflectable]
            public double button2;
            [Reflectable]
            public double impulse;
            [Reflectable]
            public double fixangle;
            [Reflectable]
            public double[] v_angle = new double[3]; // 70
            [Reflectable]
            public double idealpitch; // 73
            [Reflectable]
            public int netname;
            [Reflectable]
            public int enemy; // 75
            [Reflectable]
            public double flags;
            [Reflectable]
            public double colormap;
            [Reflectable]
            public double team;
            [Reflectable]
            public double max_health;
            [Reflectable]
            public double teleport_time; // 80
            [Reflectable]
            public double armortype;
            [Reflectable]
            public double armorvalue;
            [Reflectable]
            public double waterlevel;
            [Reflectable]
            public double watertype;
            [Reflectable]
            public double ideal_yaw; // 85
            [Reflectable]
            public double yaw_speed;
            [Reflectable]
            public int aiment;
            [Reflectable]
            public int goalentity;
            [Reflectable]
            public double spawnflags;
            [Reflectable]
            public int target; // 90
            [Reflectable]
            public int targetname;
            [Reflectable]
            public double dmg_take;
            [Reflectable]
            public double dmg_save;
            [Reflectable]
            public int dmg_inflictor;
            [Reflectable]
            public int owner; // 95
            [Reflectable]
            public double[] movedir = new double[3]; // 96
            [Reflectable]
            public int message; // 99
            [Reflectable]
            public double sounds; // 100
            [Reflectable]
            public int noise;
            [Reflectable]
            public int noise1;
            [Reflectable]
            public int noise2;
            [Reflectable]
            public int noise3; // 104

            //public Dictionary<string, object> dictionary = new Dictionary<string, object>();
            public Object[] variables;

            public void clear()
            {
                int kk;
                modelindex = 0;
                ltime = 0;
                movetype = 0;
                solid = 0;
                classname = 0;
                model = 0;
                frame = 0;
                skin = 0;
                effects = 0;
                touch = 0;
                use = 0;
                think = 0;
                blocked = 0;
                nextthink = 0;
                groundentity = 0;
                health = 0;
                frags = 0;
                weapon = 0;
                weaponmodel = 0;
                weaponframe = 0;
                currentammo = 0;
                ammo_shells = 0;
                ammo_nails = 0;
                ammo_rockets = 0;
                ammo_cells = 0;
                items = 0;
                takedamage = 0;
                chain = 0;
                deadflag = 0;
                button0 = 0;
                button1 = 0;
                button2 = 0;
                impulse = 0;
                fixangle = 0;
                idealpitch = 0;
                netname = 0;
                enemy = 0;
                flags = 0;
                colormap = 0;
                team = 0;
                max_health = 0;
                teleport_time = 0;
                armortype = 0;
                armorvalue = 0;
                waterlevel = 0;
                watertype = 0;
                ideal_yaw = 0;
                yaw_speed = 0;
                aiment = 0;
                goalentity = 0;
                spawnflags = 0;
                target = 0;
                targetname = 0;
                dmg_take = 0;
                dmg_save = 0;
                dmg_inflictor = 0;
                owner = 0;
                message = 0;
                sounds = 0;
                noise = 0;
                noise1 = 0;
                noise2 = 0;
                noise3 = 0;

                for (kk = 0; kk < 3; kk++)
                {
                    absmin[kk] = 0;
                    absmax[kk] = 0;
                    origin[kk] = 0;
                    oldorigin[kk] = 0;
                    velocity[kk] = 0;
                    angles[kk] = 0;
                    avelocity[kk] = 0;
                    punchangle[kk] = 0;
                    mins[kk] = 0;
                    maxs[kk] = 0;
                    size[kk] = 0;
                    view_ofs[kk] = 0;
                    v_angle[kk] = 0;
                    movedir[kk] = 0;
                }

                for(kk = 0; kk < variables.Length; kk++) variables[kk] = null;
            }
        };
        public const int sizeof_entvars_t = 420;

        public const int PROGHEADER_CRC = 5927;
    }
}